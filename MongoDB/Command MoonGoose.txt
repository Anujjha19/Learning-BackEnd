const mongoose = require('mongoose');

Connecting to Mongo DB 


        // (mongodb://127.0.0.1:27017/mongooseThapa).
        mongoose.connect("mongodb://0.0.0.0:27017/mongooseThapa", {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            retryWrites: true
        }).then(() => {
            console.log("Connected to MongoDB successfully!");
        }).catch((error) => {
            console.log("Error connecting to MongoDB:", error);
        });


Schema defines the structure of a document 

        const playlistSchema = mongoose.Schema( {
            name : {
                type : String,
                required : true,
            }, 
            ctype : String,
            videos : Number,
            author : String,
            active : Boolean,
            date : {
                type :Date,
                default : Date.now,
            }
        })


Models is a representation of a collection , It provides an interface to the database for CRUD records 

        const Playlist = new mongoose.model("Playlist", playlistSchema);


Create / Insert Document

    One Documnet 
        const createDocumnet = async () => { 
            try {
                const reactPlaylist = new Playlist({
                    name: "Node Js ",
                    ctype: "Back  End",
                    videos: 3.1,
                    author: "Thapa / Jha  ",
                    active: true,
                })
                const result = await reactPlaylist.save();
                console.log(result);
            }
            catch (err) {
                console.log(err);
            }
        }
        createDocumnet();
    
    Many Document
       
            const createDocumnet = async () => {
                try {
                    const mongoPlaylist = new Playlist({
                        name: "Mongo DB  ",
                        ctype: "Database ",
                        videos: 4,
                        author: " Jha  ",
                        active: true,
                    })
                    const nodePlylist = new Playlist({
                        name: "Node  ",
                        ctype: "Back End",
                        videos: 3.2,
                        author: "Anuj Jha  ",
                        active: false,
                    })
                    const expressPlaylist = new Playlist({
                        name: "Express Js ",
                        ctype: "Bac- End",
                        videos: 3.3,
                        author: " Frost ",
                        active: true,
                    })
                    const result = await Playlist.insertMany([mongoPlaylist , nodePlylist , expressPlaylist ]);
                    console.log(result);
                }
                catch (err) {
                    console.log(err);
                }
            }
            createDocumnet();

Read or Querying the Documents using Mongoose 


            const getDocument = async () => {
                try {
                    // const res = await Playlist.find();
                    // const res = await Playlist.find( { ctype : "Back End" } );
                    
                    const res = await Playlist.find({ ctype: "Back End" })
                        .select({ name: 1 }).limit(1);
                    console.log(res);
                }
                catch (err) {
                    console.log(err);
                }
            }
            getDocument()

MongoDB Comparison Query Operators


            const getUsingOperator = async () => {
                try {
                    // const res = await Playlist.find();
                    // const res = await Playlist.find( { ctype : "Back End" } );
                    const res = await Playlist.find(
                        {
                            // videos : { $gt : 10 }
                            // videos : { $gte : 10 }
                            // videos : { $lte : 10 }
                            // ctype : {$in : ["Back End" , "Front End"]}
                            ctype : {$nin : ["Back End" , "Front End"]}

                        })
                        .select({ name: 1 });
                        console.log(res);
                }
                catch (err) {
                    console.log(err);
                }
            }
            getUsingOperator()


MongoDB Logical Query Operators using Mongoose 


            const getUsingLogicalOperator = async () => {
                try {

                    const res = await Playlist.find(
                        {
                            // $or : [ {ctype : "Back End"} ,{author: "Anuj "} ]
                            $and : [ {ctype : "Back End"} ,{author: "Anuj Jha"} ]
                            // $not: [{ ctype: "Back End" }, { videos: 50 }]
                        })
                        .select({ name: 1, _id: 0 });
                    console.log(res);
                }
                catch (err) {
                    console.log(err);
                }
            }
            getUsingLogicalOperator()


MongoDB Sorting and Count Query Methods 


            const getCount_Query = async () => {
                try {
                    const res = await Playlist.find(
                        { author: "Anuj Jha" }
                    )
                        .select({ name: 1, _id: 0 }).countDocuments();
                    console.log(res);
                }
                catch (err) {
                    console.log(err);
                }
            }
            // getCount_Query()


            const getSortingQuery = async () => {
                try {
                    const res = await Playlist.find(
                        { author: "Anuj Jha" })
                        .select({ name: 1, _id: 0 })
                        // .sort("name : 1 " );
                        // .sort({ name : 1 });
                        // .sort("name");
                        .sort("-name");
                    console.log(res);
                }
                catch (err) {
                    console.log(err);
                }
            }
            getSortingQuery()


MongoDB Update the Documents


    Update One 
        const doUpdate = async (_id) => {
            try {
                    /* 
                    const res = await Playlist.updateOne({ _id: "643ed806aac303fbb35a86e7" })[async(id)] */

                    /* 
                    const res = await Playlist.updateOne({ _id }, { $set: { name: "REACT" } }) */

                    /*         
                    const res = await Playlist.findByIdAndUpdate({ _id }, {
                        $set: { name: "REACT " }
                    } , {
                        useFindAndModify : false 
                    }) 
                    console.log(res) // The Value that will get update will show here 
                    */
                    const res = await Playlist.findByIdAndUpdate({ _id }, {
                        $set: { name: "REACT JS " }
                    } , {
                        new : true ,
                        useFindAndModify : false 
                    })
                    console.log(res) // Now it will Give New Value 
                }
            catch (err) {
                console.log(err);
                    }
                }
        doUpdate("643ed806aac303fbb35a86e7")

    Update Many
                const res = await Playlist.updateMany({ genre: "Rock" }, {
                $set: { name: "New Rock Playlist" }
                });
                console.log(res); // This will log the number of documents updated



MongoDB Delete the Documents

            const deleteDocument = async (_id) => {

                try {
                    // const result = await Playlist.deleteOne({ _id  });
                    // const result = await Playlist.deleteMany({ _id  });
                    const result = await Playlist.findByIdAndDelete({ _id });
                    console.log(result);
                }
                catch (err) {
                    console.log(err);
                }
            }
            deleteDocument("643f84ee6ede74200716e7b0");